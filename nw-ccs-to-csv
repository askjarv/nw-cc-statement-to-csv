# importing required modules 
import PyPDF2 # Used for PDF reading
import re # Used for regex extraction of transactions
import csv # Used for CSV output
import os # Used for reading files
import datetime # Used to make the dates consistent!
path = 'C:\\Your\\Path\\Here\\'
files = []
# r=root, d=directories, f = files
for r, d, f in os.walk(path):
    for file in f:
        if '.pdf' in file:
            files.append(os.path.join(r, file))
# name of csv file 
filename = path+"records.mycsv"
print("Outputing to: "+filename)
try:
    os.remove(filename)
    os.remove("records.csv")
except:
    print("No previous run found")
# field names 
fields = ['Date', 'TransNo', 'TransName', 'TransAmount']    
with open(filename, 'a') as csvfile: 
    # creating a csv dict writer object 
    writer = csv.DictWriter(csvfile, fieldnames = fields) 
    # writing headers (field names) 
    writer.writeheader() 
# creating a pdf file object 
for f in files:
    print("Processing file: "+f)
    pdfFileObj = open(f, 'rb') 
    # creating a pdf reader object 
    pdfReader = PyPDF2.PdfFileReader(pdfFileObj)   
    # printing number of pages in pdf file 
    pages = pdfReader.numPages 
    for i in range(pages):
        print("Processing page: "+ str(i))
        pageObj = pdfReader.getPage(i) 
        # extracting raw text from page 
        txt = pageObj.extractText()
        # debug - uncomment next line to show content of file:
        # print(txt)
        # Search for transaction lines and add to dictionary
        r = re.compile(r"(?P<Date>\d{2}\/\d{2}\/\d{2})(?P<TransNo>\d{8})(?P<TransName>.+?)(?P<TransAmount>Â£\d*\.\d{2})")
        mydict = [m.groupdict() for m in r.finditer(txt)]
        ## Writing output
        # writing to csv file 
        with open(filename, 'a', newline='') as csvfile: 
            # creating a csv dict writer object 
            writer = csv.DictWriter(csvfile, fieldnames = fields) 
            # writing data rows 
            writer.writerows(mydict) 
    # closing the pdf file object 
    pdfFileObj.close() 
print("Processing CC statements complete")

# Do something with DC statements here
print("Processing DC csv files")
files = []
# r=root, d=directories, f = files
for r, d, f in os.walk(path):
    for file in f:
        if '.csv' in file:
            files.append(os.path.join(r, file))
for f in files:
    print("Processing file: "+f)
    with open(f) as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=',')
        line_count = 0
        for row in csv_reader:
            if line_count > 5:
                if row[3] != "":
                    # print(f'Date:{row[0]},TransNo:00000000,TransName:{row[1]}:{row[2]},TransAmount:-{row[3]}')
                    with open(filename, 'a', newline='') as csvfile: 
                        writer = csv.writer(csvfile)
                        newdate = row[0]
                        try:
                            newdateformated = datetime.datetime.strptime(newdate, '%d/%M/%y')
                        except:
                            newdateformated = datetime.datetime.strptime(newdate, '%d %b %Y')
                        newdescription = (f"{row[1]} {row[2]}")
                        newamount = row[3]
                        newrow = [(newdateformated.strftime("%d/%m/%y")),"00000000",str(newdescription),newamount]
                        writer.writerow(newrow)
                else:
                    # print(f'Date:{row[0]},TransNo:00000000,TransName:{row[1]}:{row[2]},TransAmount:+{row[4]}')
                    with open(filename, 'a', newline='') as csvfile: 
                        writer = csv.writer(csvfile)
                        newdate = row[0]
                        newdescription = (f"{row[1]} {row[2]}")
                        newamount = (f"+{row[4]}")
                        try:
                            newdateformated = datetime.datetime.strptime(newdate, '%d/%M/%y')
                        except:
                            newdateformated = datetime.datetime.strptime(newdate, '%d %b %Y')
                        newrow = [(newdateformated.strftime("%d/%m/%y")),"00000000",str(newdescription),newamount]
                        writer.writerow(newrow)
                line_count += 1
            else:
                line_count += 1
        print(f'Processed {line_count} lines from CSV.')
os.rename(filename,"records.csv")
print("Completed import process")
# --------------------------------------------------------------------------------------------------------------------
